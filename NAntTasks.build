<?xml version="1.0"?>
<project name="Build" default="Build" basedir="." xmlns="http://nant.sf.net/release/0.85/nant.xsd">

	<!-- Global varialbes and defaults -->
	<property name="Platform" value="Any CPU" />

	<property name="Configuration" value="Release" overwrite="false" />
	<property name="Debug" value="false" />
	<property name="DebugConditional" value="" />
	<property name="MSBuildXmlLoggerPath" value="C:\ci\CruiseControl.NET\server\ThoughtWorks.CruiseControl.MsBuild.dll" />


	<target name="Build_Release" depends="Release,Clean,RevertVersion,Build" />


	<!-- Select the configuration: Debug or Release -->
	<target name="Debug">
		<property name="Debug" value="true" />
		<property name="Configuration" value="Debug" />
		<property name="DebugConditional" value="DEBUG;TRACE;" />
	</target>

	<target name="Release">
		<property name="Debug" value="false" />
		<property name="Configuration" value="Release" />
		<property name="DebugConditional" value="" />
	</target>


	<!-- Libs -->

	<target name="replacestring">
		<!-- Pass in ${filename}, ${content-from}, ${content-to} (literal strings, not regexes -->
		<!-- echo message="In ${filename} changing from '${content-from}' to '${content-to}'" /-->

		<loadfile file="${filename}" property="filecontents">
			<filterchain>
				<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
			</filterchain>
		</loadfile>
		<echo file="${filename}" message="${string::trim-end(filecontents)}"/>
	</target>

	<script language="CSHARP" prefix="regex" >
		<code>
			<![CDATA[
			[Function("replace")]
			public static string Replace( string Input, string Pattern, string Replace ) {
				return Regex.Replace( Input, Pattern, Regex.Unescape(Replace), System.Text.RegularExpressions.RegexOptions.Multiline );
			}
			]]>
		</code>
	</script>


	<!-- Clean target will delete the current version -->
	<target name="Clean"
		description="remove generated files in the specified configuration">
		<delete failonerror="false">
			<fileset basedir=".">
				<include name="**/bin/**" />
				<include name="**/obj/**" />
				<include name="**/Debug/**" />
				<include name="**/Release/**" />
				<include name="*.log" />
				<include name="*results.xml" /><!-- NUnit results -->
				<include name="*msbuild.xml" /><!-- MSBuild results -->
				<include name="build/**" />
			</fileset>
		</delete>
		<delete dir="build" if="${directory::exists('build')}" />
	</target>


	<!-- Get the current SVN version -->
	<target name="GetVersion" description="Get the version from svn">

		<!-- A bunch of mayhem because exec can't output to a variable -->
		<exec program="svn.exe" workingdir="${project::get-base-directory()}" output="version.log" failonerror="true">
			<arg value="info" />
			<arg value="--xml" />
		</exec>
		<xmlpeek file="version.log"
				 property="svn-version"
				 xpath="/info/entry/commit/@revision" />
		<delete file="version.log" />

		<echo>Current version from Subversion is ${svn-version}</echo>
	</target>

	<target name="SetVersion" depends="GetVersion,RevertVersion">

		<!-- This isn't a regular expression, this is a hard-coded major/minor: -->
		<property name="content-from" value=".*&quot;" />
		<property name="content-to" value=".${svn-version}&quot;" />

		<echo message="Changing from ${content-from} to ${content-to} in AssemblyInfo files" />

		<foreach item="File" property="file">
			<in>
				<items refid="AssemblyInfos" />
			</in>
			<do>

				<loadfile file="${file}" property="filecontents">
					<filterchain>
						<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
					</filterchain>
				</loadfile>
				<echo file="${file}" message="${string::trim-end(filecontents)}"/>
			</do>
		</foreach>

	</target>

	<target name="RevertVersion" descripiton="Put the files back so svn can change it next time">

		<fileset id="AssemblyInfos" basedir=".">
			<exclude name="**/-*-/**/AssemblyInfo.cs" />
			<include name="**/AssemblyInfo.cs" />
		</fileset>

		<foreach item="File" property="file">
			<in>
				<items refid="AssemblyInfos" />
			</in>
			<do>
				<exec program="svn.exe" failonerror="true">
					<arg value="revert" />
					<arg value="${file}" />
				</exec>
			</do>
		</foreach>

	</target>



	<target name="Build"
		depends="Clean,SetVersion,BuildSolution" />

	<target name="BuildSolution" description="Compiles the solutions">

		<property name="PlatformNoSpace" value="${string::replace(Platform,' ','')}" />
		
		<foreach item="File" property="Solution">
			<in>
				<items basedir=".">
					<exclude name="**/-*-/**/*.sln" />
					<include name="**/*.sln" />
				</items>
			</in>
			<do>
				<property name="SolutionName" value="${path::get-file-name(Solution)}" />
				<property name="nant.settings.currentframework" value="net-3.5" if="${SolutionName!='nant.jit.sln' and SolutionName!='Restrict'}" />
				<property name="nant.settings.currentframework" value="net-4.0" if="${SolutionName=='nant.jit.sln' or SolutionName=='Restrict'}" />
				<call target="CompileSolution" />
			</do>
		</foreach>

		<foreach item="Folder" property="Project">
			<in>
				<items basedir=".">
					<exclude name="**/-*-/**/bin/${Configuration}" />
					<include name="**/bin/${Configuration}" />
				</items>
			</in>
			<do>
				<call target="CopyProject" />
			</do>
		</foreach>

	</target>

	<target name="CompileSolution" description="Compiles 1 solution using msbuild">

		<property name="MSBuildLogger" value="" />
		<property name="MSBuildConsoleLogger" value="" />
		<if test="${file::exists(MSBuildXmlLoggerPath)}">
			<property name="MSBuildLogger" value="/l:ThoughtWorks.CruiseControl.MsBuild.XmlLogger,${MSBuildXmlLoggerPath};${SolutionName}-${Platform}.msbuild.xml" />
			<property name="MSBuildConsoleLogger" value="/noconsolelogger" />
		</if>

		<echo message="Building ${Solution} for ${Platform}: ${nant.settings.currentframework} ${Configuration} ${DebugConditional}"/>
		<msbuild
			project="${Solution}"
			verbosity="Normal"
			failonerror="true">
			<property name="Configuration" value="${Configuration}" />
			<property name="Platform" value="${Platform}" />
			<property name="debug" value="${Debug}" />
			<property name="trace" value="${Debug}" />
			<arg value='/p:DefineConstants="${DebugConditional}"' />
			<arg value='${MSBuildLogger}' />
			<arg value='${MSBuildConsoleLogger}' />
		</msbuild>
	</target>

 	<target name="CopyProject" descrption="Copy a project">

		<property name="BasePath" value="${project::get-base-directory()}\" />
		<property name="BinPath" value="${path::get-directory-name(Project)}" />
		<property name="ProjectPath" value="${path::get-directory-name(BinPath)}" />
		<property name="ProjectName" value="${path::get-file-name(ProjectPath)}" />

		<property name="SourcePath" value="${string::replace(ProjectPath,BasePath,'')}" />
		<property name="Dest" value="build/${SourcePath}" />
			
 		<echo message="Copy ${ProjectName} from [${Project}] to [${Dest}]"/>
 		<mkdir dir="${Dest}" unless="${directory::exists(Dest)}" />
 		<copy todir="${Dest}" overwrite="true">
 			<fileset basedir="${Project}">
 				<exclude name="**/*.pdb" if="${Configuration!='Debug'}" />
 				<include name="**/**" />
 			</fileset>
 		</copy>

	</target>

</project>
